{"version":3,"sources":["webpack:///./src/components/PostListing.tsx","webpack:///./src/templates/tag.js"],"names":["PostListing","postList","postEdges","map","postEdge","path","node","fields","slug","tags","frontmatter","categories","cover","title","date","excerpt","timeToRead","container","spacing","post","item","xs","md","underline","href","key","variant","join","TagTemplate","data","pageContext","tag","config","siteTitle","allMarkdownRemark","edges","pageQuery"],"mappings":"4FAAA,6DAwDeA,IArDK,SAAC,GAAkB,IAkB/BC,EAlB+B,EAAhBC,UAEQC,KAAI,SAACC,GAC9B,MAAO,CACLC,KAAMD,EAASE,KAAKC,OAAOC,KAC3BC,KAAML,EAASE,KAAKI,YAAYD,KAChCE,WAAYP,EAASE,KAAKI,YAAYC,WACtCC,MAAOR,EAASE,KAAKI,YAAYE,MACjCC,MAAOT,EAASE,KAAKI,YAAYG,MACjCC,KAAMV,EAASE,KAAKC,OAAOO,KAC3BC,QAASX,EAASE,KAAKS,QACvBC,WAAYZ,EAASE,KAAKU,eAShC,OACE,oCACE,kBAAC,IAAD,CAAMC,WAAS,EAACC,QAAS,GAErBjB,EAASE,KAAI,SAACgB,GAAD,OACX,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,iCACE,kBAAC,IAAD,CAAML,WAAS,EAACC,QAAS,GACvB,kBAAC,IAAD,CAAME,MAAI,EAACC,GAAI,IACb,kBAAC,IAAD,CAAME,UAAU,OAAOC,KAAML,EAAKd,KAAMoB,IAAKN,EAAKN,OAChD,kBAAC,IAAD,CAAYa,QAAQ,MACjBP,EAAKN,SAIZ,kBAAC,IAAD,CAAMO,MAAI,EAACC,GAAI,IACb,kBAAC,IAAD,CAAYK,QAAQ,WACjBP,EAAKL,KADR,MACsB,8BAAOK,EAAKR,WAAWgB,KAAK,QAAe,IADjE,MAC+ER,EAAKH,WADpF,YACyG,MAG3G,kBAAC,IAAD,CAAMI,MAAI,EAACC,GAAI,IACb,kBAAC,IAAD,CAAYK,QAAQ,SAASP,EAAKJ,oB,kCC5CtD,mIAiBea,UAVK,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,YAAT,OAClB,kBAAC,IAAD,KACE,8BACE,kBAAC,IAAD,CACEjB,MAAK,oBAAsBiB,EAAYC,IAAlC,OAA4CC,IAAOC,YAE1D,kBAAC,IAAD,CAAa/B,UAAW2B,EAAKK,kBAAkBC,WAO9C,IAAMC,EAAS","file":"component---src-templates-tag-js-3ecf55cceb1311f0bc28.js","sourcesContent":["import React from 'react'\nimport { Typography, Grid, Link } from '@material-ui/core'\n\nconst PostListing = ({ postEdges }) => {\n  const getPostList = () => {\n    const postList = postEdges.map((postEdge: any) => {\n      return {\n        path: postEdge.node.fields.slug,\n        tags: postEdge.node.frontmatter.tags,\n        categories: postEdge.node.frontmatter.categories,\n        cover: postEdge.node.frontmatter.cover,\n        title: postEdge.node.frontmatter.title,\n        date: postEdge.node.fields.date,\n        excerpt: postEdge.node.excerpt,\n        timeToRead: postEdge.node.timeToRead\n      }\n    })\n\n    return postList\n  }\n\n  const postList = getPostList()\n\n  return (\n    <>\n      <Grid container spacing={3}>\n        {\n          postList.map((post: any) => (\n            <Grid item xs={12} md={6}>\n              <article >\n                <Grid container spacing={1}>\n                  <Grid item xs={12}>\n                    <Link underline=\"none\" href={post.path} key={post.title}>\n                      <Typography variant=\"h5\">\n                        {post.title}\n                      </Typography>\n                    </Link>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Typography variant=\"caption\">\n                      {post.date} &mdash; <span>{post.categories.join(' / ')}</span>{' '} &mdash; {post.timeToRead} Min Read{' '}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Typography variant=\"body1\">{post.excerpt}</Typography>\n                  </Grid>\n                </Grid>\n              </article>\n            </Grid>\n          ))\n        }\n      </Grid>\n    </>\n  )\n}\n\nexport default PostListing\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport { graphql } from 'gatsby'\nimport Layout from '../layout/Layout'\nimport PostListing from '../components/PostListing'\nimport config from '../../data/SiteConfig'\n\nconst TagTemplate = ({ data, pageContext }) => (\n  <Layout>\n    <main>\n      <Helmet\n        title={`Posts tagged as \"${pageContext.tag}\" | ${config.siteTitle}`}\n      />\n      <PostListing postEdges={data.allMarkdownRemark.edges} />\n    </main>\n  </Layout>\n)\nexport default TagTemplate\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query TagPage($tag: String) {\n    allMarkdownRemark(\n      limit: 1000\n      sort: { fields: [fields___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n            date(formatString: \"MMMM DD, YYYY\")\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            cover\n            date\n            categories\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}