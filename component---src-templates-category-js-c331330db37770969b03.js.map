{"version":3,"sources":["webpack:///./src/templates/category.js","webpack:///./src/components/PostListing.tsx"],"names":["CategoryTemplate","data","pageContext","title","category","config","siteTitle","container","spacing","item","xs","color","variant","postEdges","allMarkdownRemark","edges","pageQuery","PostListing","postList","map","postEdge","path","node","fields","slug","tags","frontmatter","categories","cover","date","excerpt","timeToRead","post","md","underline","href","key","join"],"mappings":"2FAAA,2JA0BeA,UAlBf,YAAkD,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,YAChC,OACE,kBAAC,IAAD,KACE,8BACE,kBAAC,IAAD,CAAQC,MAAK,KAAOD,EAAYE,SAAnB,OAAkCC,IAAOC,YACtD,kBAAC,IAAD,CAAMC,WAAS,EAACC,QAAS,GACvB,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,IACb,kBAAC,IAAD,CAAYC,MAAM,UAAUC,QAAQ,MAApC,aAAoDV,EAAYE,WAElE,kBAAC,IAAD,CAAMK,MAAI,EAACC,GAAI,IACb,kBAAC,IAAD,CAAaG,UAAWZ,EAAKa,kBAAkBC,aAWpD,IAAMC,EAAS,Y,kCC7BtB,6DAwDeC,IArDK,SAAC,GAAkB,IAkB/BC,EAlB+B,EAAhBL,UAEQM,KAAI,SAACC,GAC9B,MAAO,CACLC,KAAMD,EAASE,KAAKC,OAAOC,KAC3BC,KAAML,EAASE,KAAKI,YAAYD,KAChCE,WAAYP,EAASE,KAAKI,YAAYC,WACtCC,MAAOR,EAASE,KAAKI,YAAYE,MACjCzB,MAAOiB,EAASE,KAAKI,YAAYvB,MACjC0B,KAAMT,EAASE,KAAKC,OAAOM,KAC3BC,QAASV,EAASE,KAAKQ,QACvBC,WAAYX,EAASE,KAAKS,eAShC,OACE,oCACE,kBAAC,IAAD,CAAMxB,WAAS,EAACC,QAAS,GAErBU,EAASC,KAAI,SAACa,GAAD,OACX,kBAAC,IAAD,CAAMvB,MAAI,EAACC,GAAI,GAAIuB,GAAI,GACrB,iCACE,kBAAC,IAAD,CAAM1B,WAAS,EAACC,QAAS,GACvB,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,IACb,kBAAC,IAAD,CAAMwB,UAAU,OAAOC,KAAMH,EAAKX,KAAMe,IAAKJ,EAAK7B,OAChD,kBAAC,IAAD,CAAYS,QAAQ,MACjBoB,EAAK7B,SAIZ,kBAAC,IAAD,CAAMM,MAAI,EAACC,GAAI,IACb,kBAAC,IAAD,CAAYE,QAAQ,WACjBoB,EAAKH,KADR,MACsB,8BAAOG,EAAKL,WAAWU,KAAK,QAAe,IADjE,MAC+EL,EAAKD,WADpF,YACyG,MAG3G,kBAAC,IAAD,CAAMtB,MAAI,EAACC,GAAI,IACb,kBAAC,IAAD,CAAYE,QAAQ,SAASoB,EAAKF","file":"component---src-templates-category-js-c331330db37770969b03.js","sourcesContent":["import React from 'react'\nimport Helmet from 'react-helmet'\nimport { graphql } from 'gatsby'\nimport Layout from '../layout/Layout'\nimport PostListing from '../components/PostListing'\nimport config from '../../data/SiteConfig'\nimport { Typography, Grid } from '@material-ui/core'\n\nfunction CategoryTemplate({ data, pageContext }) {\n  return (\n    <Layout>\n      <main>\n        <Helmet title={` \"${pageContext.category}\" - ${config.siteTitle}`} />\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Typography color=\"inherit\" variant=\"h6\">Category: {pageContext.category}</Typography>\n          </Grid>\n          <Grid item xs={12}>\n            <PostListing postEdges={data.allMarkdownRemark.edges} />\n          </Grid>\n        </Grid>\n      </main>\n    </Layout>\n  )\n}\n\nexport default CategoryTemplate\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query CategoryPage($category: String) {\n    allMarkdownRemark(\n      limit: 1000\n      sort: { fields: [fields___date], order: DESC }\n      filter: { frontmatter: { categories: { in: [$category] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n            date(formatString: \"MMMM DD, YYYY\")\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            cover\n            date\n            categories\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { Typography, Grid, Link } from '@material-ui/core'\n\nconst PostListing = ({ postEdges }) => {\n  const getPostList = () => {\n    const postList = postEdges.map((postEdge: any) => {\n      return {\n        path: postEdge.node.fields.slug,\n        tags: postEdge.node.frontmatter.tags,\n        categories: postEdge.node.frontmatter.categories,\n        cover: postEdge.node.frontmatter.cover,\n        title: postEdge.node.frontmatter.title,\n        date: postEdge.node.fields.date,\n        excerpt: postEdge.node.excerpt,\n        timeToRead: postEdge.node.timeToRead\n      }\n    })\n\n    return postList\n  }\n\n  const postList = getPostList()\n\n  return (\n    <>\n      <Grid container spacing={3}>\n        {\n          postList.map((post: any) => (\n            <Grid item xs={12} md={6}>\n              <article >\n                <Grid container spacing={1}>\n                  <Grid item xs={12}>\n                    <Link underline=\"none\" href={post.path} key={post.title}>\n                      <Typography variant=\"h5\">\n                        {post.title}\n                      </Typography>\n                    </Link>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Typography variant=\"caption\">\n                      {post.date} &mdash; <span>{post.categories.join(' / ')}</span>{' '} &mdash; {post.timeToRead} Min Read{' '}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Typography variant=\"body1\">{post.excerpt}</Typography>\n                  </Grid>\n                </Grid>\n              </article>\n            </Grid>\n          ))\n        }\n      </Grid>\n    </>\n  )\n}\n\nexport default PostListing\n"],"sourceRoot":""}